---
apiVersion: v1
kind: Namespace
metadata:
  name: eks-ec2-app
  labels:
    # ::Best Practice:: set pod-security
    pod-security.kubernetes.io/enforce: privileged
    pod-security.kubernetes.io/audit: privileged
    pod-security.kubernetes.io/warn: privileged
    # pod-security.kubernetes.io/enforce: baseline
    # pod-security.kubernetes.io/audit: baseline
    # pod-security.kubernetes.io/warn: baseline
    # pod-security.kubernetes.io/enforce: restricted
    # pod-security.kubernetes.io/audit: restricted
    # pod-security.kubernetes.io/warn: restricted
# ---
# ::Best Practice:: set ResourceQuota
# apiVersion: v1
# kind: ResourceQuota
# metadata:
#   name: eks-ec2-app-resourcequota
#   namespace: eks-ec2-app
# spec:
#   hard:
#     requests.cpu: "1"
#     requests.memory: 1Gi
#     limits.cpu: "2"
#     limits.memory: 2Gi
---
# ::Best Practice:: every application should have dedicated serviceAccount
# ::Best Practice:: Service account tokens are used to authenticate requests from in-cluster processes to the Kubernetes API server.
#                   Many workloads do not need to communicate with the API server and hence should have `automountServiceAccountToken: false`.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eks-ec2-app
  # annotations:
  labels:
    app: eks-ec2-linux-app
  namespace: eks-ec2-app
automountServiceAccountToken: false
# ---
# AGGIUNGERE ROLE AND ROLEBINDINGS CON BEST PRACTICES
---
### NLB
# - https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/service/nlb/
# - https://github.com/kubernetes-sigs/aws-load-balancer-controller/blob/main/docs/guide/service/annotations.md
apiVersion: v1
kind: Service
metadata:
  name: eks-ec2-linux-service
  namespace: eks-ec2-app
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    # service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
    service.beta.kubernetes.io/aws-load-balancer-name: eks-ec2-linux-app
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
    # service.beta.kubernetes.io/aws-load-balancer-attributes: access_logs.s3.enabled=true,access_logs.s3.bucket=my-access-log-bucket,access_logs.s3.prefix=eks-ec2-linux-app
  labels:
    app: eks-ec2-linux-app
spec:
  type: LoadBalancer
  loadBalancerClass: service.k8s.aws/nlb
  selector:
    app: eks-ec2-linux-app
  ports:
    - name: 80-80
      protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eks-ec2-linux-deployment
  namespace: eks-ec2-app
  labels:
    app: eks-ec2-linux-app
spec:
  # ::Best Practice::
  # If you plan to use HPA with a Deployment or a StatefulSet, do NOT declare replicas.
  # If you do, each rolling update will cancel the effect of the HPA for a while.
  # Define replicas only for the resources that are NOT used in conjunction with HPA.
  # replicas: 3
  selector:
    matchLabels:
      app: eks-ec2-linux-app
  template:
    metadata:
      labels:
        app: eks-ec2-linux-app
      annotations:
        # https://codeberg.org/hjacobs/kube-downscaler#user-content-uptime--downtime-spec
        downscaler/force-uptime: "true"
    spec:
      # ::Best Practice:: automountServiceAccountToken: false
      automountServiceAccountToken: false
      # ::Best Practice:: select the proper ARCH
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
      # ::Best Practice::
      # https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
      topologySpreadConstraints:
        # BE AWARE that topologyKey: `kubernetes.io/hostname` would allocate 1 node per replica
        # - maxSkew: 1
        #   topologyKey: kubernetes.io/hostname
        #   whenUnsatisfiable: DoNotSchedule
        #   labelSelector:
        #     matchLabels:
        #       app: eks-ec2-linux-app
        #   matchLabelKeys:
        #     - pod-template-hash
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: eks-ec2-linux-app
          matchLabelKeys:
            - pod-template-hash
      containers:
      - name: nginx
        image: public.ecr.aws/nginx/nginx:1.21
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - name: tmp-custom
          mountPath: /tmp/custom
        - name: var-cache-nginx
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
        - name: nginx-status-vol
          mountPath: /etc/nginx/conf.d/nginx_status.conf
          subPath: nginx_status.conf                      # subPath property is used to reference the file by key
          readOnly: true
        imagePullPolicy: IfNotPresent
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CUSTOM_LOG_DIR
            value: "/tmp/custom"
        livenessProbe:
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        # ::Best Practice:: securityContext container-level
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
            - CHOWN
            - SETGID
            - SETUID
          # runAsNonRoot: true
          # runAsUser: 10123
      # Configure Prometheus to scrape metrics from the server with the exporter.
      # Note that the default scrape port of the exporter is 9113 and the default metrics path /metrics.
      - name: nginx-exporter
        image: public.ecr.aws/nginx/nginx-prometheus-exporter:0.11.0
        args:
          - "-nginx.scrape-uri=http://localhost:8080/nginx_status"
        resources:
          limits:
            memory: 128Mi
            cpu: 500m
        ports:
          - containerPort: 9113
      volumes:
        - name: tmp-custom
          emptyDir: {}
        - name: var-cache-nginx
          emptyDir: {}
        - name: var-run
          emptyDir: {}
        - name: nginx-status-vol
          configMap:
            name: eks-ec2-app-nginx-status
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: eks-ec2-app
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: eks-ec2-app-pdb
  namespace: eks-ec2-app
  labels:
    app: eks-ec2-linux-app
spec:
  minAvailable: 0 # ::Best Practice:: minAvailable must be >1, it's 0 for my simplicity here
  selector:
    matchLabels:
      app: eks-ec2-linux-app
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: eks-ec2-app-hpa
  namespace: eks-ec2-app
  labels:
    app: eks-ec2-linux-app
spec:
  minReplicas: 1
  maxReplicas: 500
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 5
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: eks-ec2-linux-deployment
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: eks-ec2-app-nginx-status
  namespace: eks-ec2-app
  labels:
    app: eks-ec2-linux-app
data:
  nginx_status.conf: |-
    server {
      listen 8080;
      server_name status.localhost;
      keepalive_timeout 0;

      access_log off;
      allow 127.0.0.1;
      deny all;

      location /nginx_status {
        stub_status on;
      }
    }
# ---
# apiVersion: networking.k8s.io/v1
# kind: NetworkPolicy
# metadata:
#   name: eks-ec2-app-deny-all
#   namespace: eks-ec2-app
# spec:
#   podSelector: {}
#   # podSelector:
#   #   matchLabels:
#   #     app: eks-ec2-linux-app
#   policyTypes:
#   - Ingress
#   - Egress
#---
# kind: NetworkPolicy
# apiVersion: networking.k8s.io/v1
# metadata:
#   name: demo-app-allow-samens
#   namespace: eks-ec2-app
# spec:
#   podSelector:
#     matchLabels:
#       app: demo-app
#   ingress:
#   - from:
#       - namespaceSelector:
#           matchLabels:
#             kubernetes.io/metadata.name: default


# How to configure the S3 bucket in a different account
# use https://docs.aws.amazon.com/elasticloadbalancing/latest/application/enable-access-logging.html#attach-bucket-policy
# {
#     "Version": "2012-10-17",
#     "Statement": [
#         {
#             "Effect": "Allow",
#             "Principal": {
#                 "AWS": "arn:aws:iam::156460612806:root"
#             },
#             "Action": "s3:PutObject",
#             "Resource": "arn:aws:s3:::b2c-ibef-tst-ingress-alb-eu-west-1-747352356258/*"
#         },
#         {
#             "Effect": "Allow",
#             "Principal": {
#                 "Service": "delivery.logs.amazonaws.com"
#             },
#             "Action": "s3:PutObject",
#             "Resource": "arn:aws:s3:::b2c-ibef-tst-ingress-alb-eu-west-1-747352356258/*",
#             "Condition": {
#                 "StringEquals": {
#                     "s3:x-amz-acl": "bucket-owner-full-control"
#                 }
#             }
#         },
#         {
#             "Effect": "Allow",
#             "Principal": {
#                 "Service": "delivery.logs.amazonaws.com"
#             },
#             "Action": "s3:GetBucketAcl",
#             "Resource": "arn:aws:s3:::b2c-ibef-tst-ingress-alb-eu-west-1-747352356258"
#         }
#     ]
# }